{
  "version": 3,
  "sources": ["../../../contentlayer.config.ts"],
  "sourcesContent": ["/* LIBRARIES */\r\nimport { defineDocumentType, makeSource } from \"contentlayer/source-files\";\r\n\r\n/* LIBRARIES */\r\nimport GithubSlugger from 'github-slugger'\r\n\r\n/* LIBRARIES: MDX PLUGINS */\r\nimport remarkGfm from \"remark-gfm\"\r\nimport rehypeSlug from 'rehype-slug'\r\nimport rehypePrettyCode from 'rehype-pretty-code';\r\nimport rehypeAutolinkHeadings from \"rehype-autolink-headings\"\r\n\r\n/* You can see docs in https://contentlayer.dev/ */\r\nexport const BlogPost = defineDocumentType(() => ({\r\n  name: \"BlogPost\",\r\n  filePathPattern: `**/blog/**/*.mdx`,\r\n  contentType: \"mdx\",\r\n  fields: {\r\n    title: {\r\n      type: \"string\",\r\n      required: true,\r\n    },\r\n    description: {\r\n      type: \"string\",\r\n      required: true,\r\n    },\r\n    publishedAt: {\r\n      type: \"string\",\r\n      required: true,\r\n    },\r\n  },\r\n  // @ts-ignore\r\n  computedFields: computedFields(),\r\n}));\r\n\r\nconst computedFields = () => ({\r\n  metadata: {\r\n    type: \"{ slug: string, slugAsPath: string }\",\r\n    resolve: ( doc: any ) => {\r\n\r\n      const path = doc._raw.flattenedPath as string;\r\n\r\n      return {\r\n        slug: '/' + path,\r\n        slugAsPath: path.replaceAll('/','-')\r\n      }\r\n    }\r\n  },\r\n  headings: {\r\n    type: \"{ heading: number, text: string, slug: string }[]\",\r\n    resolve: async (doc: any) => {\r\n      // use same package as rehypeSlug so toc and sluggified headings match\r\n      // https://github.com/rehypejs/rehype-slug/blob/main/package.json#L36\r\n      const slugger = new GithubSlugger()\r\n\r\n      // https://stackoverflow.com/a/70802303\r\n      const regXHeader = /(?<flag>#{1,6})\\s+(?<content>.+)/g\r\n\r\n      const headings = Array.from(doc.body.raw.matchAll(regXHeader)).map(\r\n        ({ groups }: any) => {\r\n\r\n          const flag = groups?.flag\r\n          const content = groups?.content\r\n          return {\r\n            heading: flag?.length,\r\n            text: content,\r\n            slug: content ? slugger.slug(content) : '',\r\n          }\r\n        },\r\n      )\r\n\r\n      return headings\r\n    },\r\n  },\r\n});\r\n\r\nexport default makeSource({\r\n  contentDirPath: \"content\",\r\n  documentTypes: [BlogPost],\r\n  //PLUGINS\r\n  mdx: {\r\n    remarkPlugins: [remarkGfm],\r\n    rehypePlugins: [\r\n      rehypeSlug,\r\n      [\r\n        rehypePrettyCode,\r\n        {\r\n          theme: \"github-dark\",\r\n          onVisitLine(node:any) {\r\n            // Prevent lines from collapsing in `display: grid` mode, and allow empty\r\n            // lines to be copy/pasted\r\n            if (node.children.length === 0) {\r\n              node.children = [{ type: \"text\", value: \" \" }];\r\n            }\r\n          },\r\n          onVisitHighlightedLine(node:any) {\r\n            node.properties.className.push(\"line--highlighted\");\r\n          },\r\n          onVisitHighlightedWord(node:any) {\r\n            node.properties.className = [\"word--highlighted\"];\r\n          },\r\n        },\r\n      ],\r\n      [\r\n        rehypeAutolinkHeadings,\r\n        {\r\n          properties: {\r\n            className: [\"subheading-anchor\"],\r\n            ariaLabel: \"Link to section\",\r\n          },\r\n        },\r\n      ],\r\n    ],\r\n  },\r\n});"],
  "mappings": ";AACA,SAAS,oBAAoB,kBAAkB;AAG/C,OAAO,mBAAmB;AAG1B,OAAO,eAAe;AACtB,OAAO,gBAAgB;AACvB,OAAO,sBAAsB;AAC7B,OAAO,4BAA4B;AAG5B,IAAM,WAAW,mBAAmB,OAAO;AAAA,EAChD,MAAM;AAAA,EACN,iBAAiB;AAAA,EACjB,aAAa;AAAA,EACb,QAAQ;AAAA,IACN,OAAO;AAAA,MACL,MAAM;AAAA,MACN,UAAU;AAAA,IACZ;AAAA,IACA,aAAa;AAAA,MACX,MAAM;AAAA,MACN,UAAU;AAAA,IACZ;AAAA,IACA,aAAa;AAAA,MACX,MAAM;AAAA,MACN,UAAU;AAAA,IACZ;AAAA,EACF;AAAA;AAAA,EAEA,gBAAgB,eAAe;AACjC,EAAE;AAEF,IAAM,iBAAiB,OAAO;AAAA,EAC5B,UAAU;AAAA,IACR,MAAM;AAAA,IACN,SAAS,CAAE,QAAc;AAEvB,YAAM,OAAO,IAAI,KAAK;AAEtB,aAAO;AAAA,QACL,MAAM,MAAM;AAAA,QACZ,YAAY,KAAK,WAAW,KAAI,GAAG;AAAA,MACrC;AAAA,IACF;AAAA,EACF;AAAA,EACA,UAAU;AAAA,IACR,MAAM;AAAA,IACN,SAAS,OAAO,QAAa;AAG3B,YAAM,UAAU,IAAI,cAAc;AAGlC,YAAM,aAAa;AAEnB,YAAM,WAAW,MAAM,KAAK,IAAI,KAAK,IAAI,SAAS,UAAU,CAAC,EAAE;AAAA,QAC7D,CAAC,EAAE,OAAO,MAAW;AAEnB,gBAAM,OAAO,QAAQ;AACrB,gBAAM,UAAU,QAAQ;AACxB,iBAAO;AAAA,YACL,SAAS,MAAM;AAAA,YACf,MAAM;AAAA,YACN,MAAM,UAAU,QAAQ,KAAK,OAAO,IAAI;AAAA,UAC1C;AAAA,QACF;AAAA,MACF;AAEA,aAAO;AAAA,IACT;AAAA,EACF;AACF;AAEA,IAAO,8BAAQ,WAAW;AAAA,EACxB,gBAAgB;AAAA,EAChB,eAAe,CAAC,QAAQ;AAAA;AAAA,EAExB,KAAK;AAAA,IACH,eAAe,CAAC,SAAS;AAAA,IACzB,eAAe;AAAA,MACb;AAAA,MACA;AAAA,QACE;AAAA,QACA;AAAA,UACE,OAAO;AAAA,UACP,YAAY,MAAU;AAGpB,gBAAI,KAAK,SAAS,WAAW,GAAG;AAC9B,mBAAK,WAAW,CAAC,EAAE,MAAM,QAAQ,OAAO,IAAI,CAAC;AAAA,YAC/C;AAAA,UACF;AAAA,UACA,uBAAuB,MAAU;AAC/B,iBAAK,WAAW,UAAU,KAAK,mBAAmB;AAAA,UACpD;AAAA,UACA,uBAAuB,MAAU;AAC/B,iBAAK,WAAW,YAAY,CAAC,mBAAmB;AAAA,UAClD;AAAA,QACF;AAAA,MACF;AAAA,MACA;AAAA,QACE;AAAA,QACA;AAAA,UACE,YAAY;AAAA,YACV,WAAW,CAAC,mBAAmB;AAAA,YAC/B,WAAW;AAAA,UACb;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAAA,EACF;AACF,CAAC;",
  "names": []
}
